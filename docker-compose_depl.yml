# docker-compose.yml

version: '3.8' # Or your preferred compatible version

services:
  web:
    build: . # Assumes your Dockerfile is in the current directory (project root)
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app # Mounts your current directory (project root) to /app in the container
               # This is great for development as code changes are reflected live.
    ports:
      - "8000:8000" # Maps port 8000 on your host to port 8000 in the container
    depends_on:
      - db # Ensures the 'db' service is started before the 'web' service
    env_file:
      - .env # Tells Docker Compose to load environment variables from the .env file
             # located in the same directory as this docker-compose.yml

  db:
    image: postgres:16 # Uses the official PostgreSQL image, version 16
    restart: always # Ensures the database container restarts if it crashes
    environment:
      # These environment variables are used by the PostgreSQL image
      # to initialize the database when it first starts.
      POSTGRES_DB: postgres       # Name of the database to create
      POSTGRES_USER: postgres     # Username for the database
      POSTGRES_PASSWORD: postgres # Password for the database user
                                  # IMPORTANT: For production, use strong, unique passwords
                                  # and consider managing them via Docker secrets or a secrets manager.
                                  # For local development, 'postgres' is often fine.
    ports:
      - "5432:5432" # Maps port 5432 on your host to port 5432 in the container
                    # This allows you to connect to the DB from your host machine if needed.
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persists database data across container restarts
                                             # 'postgres_data' is a named volume defined below.

volumes:
  postgres_data: # Defines a named volume for persistent PostgreSQL data



# Restarts konteinerus
# docker-compose restart

# Visu novāc
# docker-compose down

# Visus failus izdzēš
# docker system prune -a --volumes

# Uzbūve no jauna
# docker-compose up --build

# Jaunās lietas migrē
# docker-compose exec web python manage.py migrate

# Super admina izveide
# docker-compose exec web python manage.py createsuperuser

# Importorte katalogu
# docker-compose exec web python manage.py import_products